@startuml
class DeliversExperienceInfo {
    + <<readonly>> PlayerExperience : int = 0
    + <<readonly>> Type : string = null
    + <<readonly>> Cursor : string = "enter"
    + <<readonly>> Voice : string = "Action"
    + <<override>> Create(init:ActorInitializer) : object
}
class DeliversExperience {
    + DeliversExperience(init:ActorInitializer, info:DeliversExperienceInfo)
    + IssueOrder(self:Actor, order:IOrderTargeter, target:Target, queued:bool) : Order
    + VoicePhraseForOrder(self:Actor, order:Order) : string
    + ResolveOrder(self:Actor, order:Order) : void
}
class "Requires`1"<T> {
}
class "IEnumerable`1"<T> {
}
class DeliversExperienceOrderTargeter {
    + DeliversExperienceOrderTargeter(info:DeliversExperienceInfo)
    + <<override>> CanTargetActor(self:Actor, target:Actor, modifiers:TargetModifiers, cursor:string) : bool
    + <<override>> CanTargetFrozenActor(self:Actor, target:FrozenActor, modifiers:TargetModifiers, cursor:string) : bool
}
TraitInfo <|-- DeliversExperienceInfo
"Requires`1" "<GainsExperienceInfo>" <|-- DeliversExperienceInfo
DeliversExperienceInfo o-> "TargetLineColor" Color
IIssueOrder <|-- DeliversExperience
IResolveOrder <|-- DeliversExperience
IOrderVoice <|-- DeliversExperience
DeliversExperience --> "info" DeliversExperienceInfo
DeliversExperience --> "self" Actor
DeliversExperience --> "gainsExperience" GainsExperience
DeliversExperience --> "Orders<IOrderTargeter>" "IEnumerable`1"
DeliversExperience +-- DeliversExperienceOrderTargeter
UnitOrderTargeter <|-- DeliversExperienceOrderTargeter
@enduml
